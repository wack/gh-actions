# This workflow validates a Rust program.
# It expects that the repo uses `Cargo Make`,
# and `cargo make ci-flow` is the command to
# run to validate the build.
name: "Validate Build"

on:
  workflow_call:
    inputs:
      artifact-name:
        description: "The name of an artifact generated during your workflow that you'd like to save."
        required: false
        type: string
      artifact-path:
        description: "The path the artifact name described above. Must be provided if name is provided."
        required: false
        type: string
      codecov-enabled:
        description: "Whether Codecov has been enabled for this repository."
        required: false
        type: boolean
        default: false

env:
  CARGO_TERM_COLOR: always

jobs:
  # This job installs Cargo Make and Cargo Nextest before running
  # the CI workflow using Cargo Make. Most of the time, it should
  # restore Cargo Make and other dependencies from cache.
  build:
    name: Validate Rust Build
    runs-on: ubuntu-22.04
    permissions:
      id-token: write
      contents: read
      attestations: write
    steps:
      # Checks out the repo that called this workflow, not
      # the repo that this workflow is defined in.
      - name: Checkout the Repo
        uses: actions/checkout@v4

      # Setup Rust and install our most commonly used tools.
      # This call references the action at ./lib/setup-rust, but
      # because its run from the context of the caller, we have to use
      # the fully-qualified path.
      - name: "Setup Rust"
        uses: "wack/gh-actions/setup-rust@trunk"
      
      # This is the actual "validation" step.
      - name: "Cargo Make"
        run: cargo make ci-flow

      # Upload the coverage profile if possible.
      - name: "Upload Coverage"
        uses: coverallsapp/github-action@v2
        if: ${{ inputs.codecov-enabled }}
        with:
          git-branch: "${{ github.base_ref || github.event.merge_group.base_ref }}"	

      - name: "Upload artifact"
        if: ${{ inputs.artifact-name }}
        uses: actions/upload-artifact@v4
        with:
          name: ${{ inputs.artifact-name }}
          path: ${{ inputs.artifact-path }}

      # This provides unfalsifiable proof (cryptographically)
      # that this artifact was generated by this workflow and
      # this repo and this organization. Attesting the artifact
      # is useful for other repos that want to consume the artifact
      # because it lets them verify where the artifact came from.
      - name: Generate artifact attestation
        if: ${{ inputs.artifact-name }}
        uses: actions/attest-build-provenance@v2
        with:
          subject-path: ${{ inputs.artifact-path }}
